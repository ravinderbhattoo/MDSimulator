using ForwardDiff
using LinearAlgebra

# exports
export potential_force, potential_energy

######################################################
# NN Potential                                       #
######################################################

abstract type MLPairPotential <: MLPotential end
abstract type MLModelPotential <: MLPotential end
export MLPairPotential

export NNPair
struct NNPair <: MLPairPotential
    model
    force
    energy
    function NNPair(model)
        function energy(x)
            return model(x)
        end
        neg_‚àÇU_‚àÇx = (x) -> -ForwardDiff.derivative(energy, x)
        new(model, neg_‚àÇU_‚àÇx, energy)
    end
end

function Base.show(stream::IO, pp::NNPair)
    println(stream, "NN Pair Potential:")
    println(stream, "\tPotential Energy (ùëà) = model(x) " )
    println(stream, "\tPotential force = -‚àÇùëà/‚àÇx where" )
    print(stream, "\tmodel:\t"); show(stream, pp.model); println(stream)
end


function potential_energy(r, pot::NNPair) 
    return pot.energy(r)
end

function potential_force(r, pot::NNPair)
    return pot.force(r)
end

######################################################
# NN Potential                                       #
######################################################
######################################################
# LNN Potential                                       #
######################################################

export LNN 

struct LNN <: MLModelPotential
    model
    acceleration
    energy
    function LNN(model)
        ùêø(xÃá, x) = reshape([sum(model(vcat(x,xÃá)))], (1,1))
        ‚àá‚Çì(xÃá, x, ùêø) = ForwardDiff.jacobian((x) -> ùêø(xÃá, x), x)
        ‚àá‚ÇìÃá(xÃá, x, ùêø) = ForwardDiff.jacobian((xÃá) -> ùêø(xÃá, x), xÃá)
        ‚àá‚ÇìÃá·µÄ(xÃá, x, ùêø) = transpose(‚àá‚ÇìÃá(xÃá, x, ùêø))
        ‚àá‚ÇìÃá‚àá‚ÇìÃá·µÄ(xÃá, x, ùêø) = ‚àá‚ÇìÃá(xÃá, x, (xÃá, x) -> ‚àá‚ÇìÃá·µÄ(xÃá, x, ùêø))
        ‚àá‚Çì‚àá‚ÇìÃá·µÄ(xÃá, x, ùêø) = ‚àá‚Çì(xÃá, x, (xÃá, x) -> ‚àá‚ÇìÃá·µÄ(xÃá, x, ùêø))
        function acc(xÃá, x)
            ‚àá‚Çìùêø = ‚àá‚Çì(xÃá, x, ùêø)'
            ‚àá‚ÇìÃá‚àá‚ÇìÃá·µÄùêø = ‚àá‚ÇìÃá‚àá‚ÇìÃá·µÄ(xÃá, x, ùêø)
            ‚àá‚Çì‚àá‚ÇìÃá·µÄùêø = ‚àá‚Çì‚àá‚ÇìÃá·µÄ(xÃá, x, ùêø)
            N = length(x)
            qÃà = reshape(inv(‚àá‚ÇìÃá‚àá‚ÇìÃá·µÄùêø + 1e-9I(N))*(‚àá‚Çìùêø - ‚àá‚Çì‚àá‚ÇìÃá·µÄùêø * reshape(xÃá, (:,1))), size(x)...)
            return qÃà
        end
        new(model, acc, (xÃá, x)->first(ùêø(xÃá, x)))
    end
end


function Base.show(stream::IO, pp::LNN)
    println(stream, "LNN Potential:")
    println(stream, "\tPotential Energy = model(x) where" )
    print(stream, "\tmodel:\t"); show(stream, pp.model); println(stream)
end


function potential_energy(v::Array{F1,2}, u::Array{F2,2}, pot::LNN) where {F1, F2} 
    return pot.energy(v, u)
end

function acceleration(v::Array{F1,2}, u::Array{F2,2}, pot::LNN) where {F1, F2}
    return pot.acceleration(v, u)
end

######################################################
# LNN Potential                                       #
######################################################
